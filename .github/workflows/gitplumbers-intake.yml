name: gitPlumbers: Intake
on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]
permissions:
  issues: write
  contents: read
  pull-requests: write
  checks: write
jobs:
  triage:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/gp '))
    steps:
      - name: Parse command or form
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue?.body || context.payload.comment?.body || '';
            const labels = new Set(['gitplumbers']);
            if (body.includes('Production incident')) labels.add('priority:critical');
            if (body.includes('Performance regression')) labels.add('area:perf');
            if (body.includes('Security concern')) labels.add('area:security');
            if (body.includes('Build/CI failing')) labels.add('area:build');
            const commandBody = context.payload.comment?.body?.trim() || '';
            const command = commandBody.startsWith('/gp ')
              ? commandBody.slice(4).split(/\s+/).filter(Boolean)
              : [];
            core.setOutput('labels', [...labels].join(','));
            core.setOutput('command', command[0] || '');
            core.setOutput('command_args', command.slice(1).join(' '));
      - name: Apply labels & assign gitPlumbers team
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ steps.parse.outputs.labels }}
      - name: Assign team
        uses: pozil/assign-reviewers@v2
        with:
          reviewers: gitplumbers-team
          team-reviewers: gitplumbers
      - name: Kick diagnostics
        if: steps.parse.outputs.command == '' || steps.parse.outputs.command == 'triage'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: gp_intake
          client-payload: |
            {
              "issue": ${{ toJson(github.event.issue) }},
              "command": "${{ steps.parse.outputs.command }}",
              "command_args": "${{ steps.parse.outputs.command_args }}"
            }
